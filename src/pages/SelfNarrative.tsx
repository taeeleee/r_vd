import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ArrowLeft, Plus, Sparkles, Calendar, Mail, Book, Save } from "lucide-react";
import { useNavigate } from "react-router-dom";

interface TimelineEvent {
  id: number;
  year: string;
  event: string;
  category: "past" | "present" | "future";
}

interface DailyLetter {
  id: number;
  date: string;
  content: string;
  aiSummary?: string;
}

const SelfNarrative = () => {
  const navigate = useNavigate();
  
  const [timelineEvents, setTimelineEvents] = useState<TimelineEvent[]>([
    { id: 1, year: "2020", event: "대학교 졸업", category: "past" },
    { id: 2, year: "2023", event: "첫 직장 취업", category: "past" },
    { id: 3, year: "2025", event: "새로운 목표 설정", category: "present" },
    { id: 4, year: "2026", event: "창업 준비", category: "future" },
  ]);

  const [dailyLetters, setDailyLetters] = useState<DailyLetter[]>([
    { 
      id: 1, 
      date: "2025-01-21", 
      content: "오늘은 새로운 목표를 세웠다. 나는 더 나은 사람이 되고 싶다.",
      aiSummary: "자기계발과 성장에 대한 의지를 보여주는 하루"
    },
  ]);

  const [newEventYear, setNewEventYear] = useState("");
  const [newEventText, setNewEventText] = useState("");
  const [newEventCategory, setNewEventCategory] = useState<"past" | "present" | "future">("present");
  const [newLetterContent, setNewLetterContent] = useState("");
  const [showAddEvent, setShowAddEvent] = useState(false);
  const [showAddLetter, setShowAddLetter] = useState(false);

  const addTimelineEvent = () => {
    if (newEventYear && newEventText) {
      const newEvent: TimelineEvent = {
        id: Date.now(),
        year: newEventYear,
        event: newEventText,
        category: newEventCategory
      };
      setTimelineEvents([...timelineEvents, newEvent].sort((a, b) => parseInt(a.year) - parseInt(b.year)));
      setNewEventYear("");
      setNewEventText("");
      setShowAddEvent(false);
    }
  };

  const addDailyLetter = () => {
    if (newLetterContent.trim()) {
      const newLetter: DailyLetter = {
        id: Date.now(),
        date: new Date().toISOString().split('T')[0],
        content: newLetterContent,
        aiSummary: "AI가 분석 중..." // In real app, this would be generated by AI
      };
      setDailyLetters([newLetter, ...dailyLetters]);
      setNewLetterContent("");
      setShowAddLetter(false);
      
      // Simulate AI processing
      setTimeout(() => {
        setDailyLetters(prev => prev.map(letter => 
          letter.id === newLetter.id 
            ? { ...letter, aiSummary: "성찰과 성장에 대한 깊은 생각을 담은 편지" }
            : letter
        ));
      }, 2000);
    }
  };

  const getCategoryColor = (category: "past" | "present" | "future") => {
    switch (category) {
      case "past": return "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200";
      case "present": return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200";
      case "future": return "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200";
    }
  };

  const getCategoryLabel = (category: "past" | "present" | "future") => {
    switch (category) {
      case "past": return "과거";
      case "present": return "현재";
      case "future": return "미래";
    }
  };

  return (
    <div className="flex flex-col h-screen bg-background">
      {/* Header */}
      <header className="flex items-center justify-between p-4 bg-white/80 backdrop-blur-lg border-b border-white/20">
        <Button variant="ghost" size="icon" onClick={() => navigate("/")} className="text-muted-foreground">
          <ArrowLeft className="w-5 h-5" />
        </Button>
        <h1 className="text-lg font-medium text-foreground">AI 자기서사 창작 툴</h1>
        <Sparkles className="w-5 h-5 text-primary" />
      </header>

      {/* Content */}
      <main className="flex-1 p-4 overflow-hidden">
        <div className="h-full max-w-4xl mx-auto">
          <Tabs defaultValue="timeline" className="h-full">
            <TabsList className="grid w-full grid-cols-3 mb-4">
              <TabsTrigger value="timeline" className="flex items-center gap-2">
                <Calendar className="w-4 h-4" />
                인생 타임라인
              </TabsTrigger>
              <TabsTrigger value="letters" className="flex items-center gap-2">
                <Mail className="w-4 h-4" />
                일기 편지
              </TabsTrigger>
              <TabsTrigger value="story" className="flex items-center gap-2">
                <Book className="w-4 h-4" />
                나의 이야기
              </TabsTrigger>
            </TabsList>

            {/* Timeline Tab */}
            <TabsContent value="timeline" className="h-full overflow-y-auto">
              <Card className="p-6 bg-white/70 backdrop-blur-lg border border-white/30 shadow-glass">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-xl font-semibold text-foreground">나의 인생 타임라인</h2>
                  <Button onClick={() => setShowAddEvent(true)} size="sm">
                    <Plus className="w-4 h-4 mr-2" />
                    이벤트 추가
                  </Button>
                </div>

                {showAddEvent && (
                  <Card className="p-4 mb-6 bg-white/50 border border-white/40">
                    <div className="space-y-3">
                      <div className="flex gap-3">
                        <Input
                          placeholder="연도 (예: 2025)"
                          value={newEventYear}
                          onChange={(e) => setNewEventYear(e.target.value)}
                          className="w-32"
                        />
                        <div className="flex gap-2">
                          {(["past", "present", "future"] as const).map((category) => (
                            <Button
                              key={category}
                              variant={newEventCategory === category ? "default" : "outline"}
                              size="sm"
                              onClick={() => setNewEventCategory(category)}
                            >
                              {getCategoryLabel(category)}
                            </Button>
                          ))}
                        </div>
                      </div>
                      <Textarea
                        placeholder="어떤 일이 있었나요? (예: 대학교 졸업, 첫 직장 취업)"
                        value={newEventText}
                        onChange={(e) => setNewEventText(e.target.value)}
                        rows={2}
                      />
                      <div className="flex gap-2">
                        <Button onClick={addTimelineEvent} size="sm">
                          <Save className="w-4 h-4 mr-2" />
                          저장
                        </Button>
                        <Button variant="ghost" size="sm" onClick={() => setShowAddEvent(false)}>
                          취소
                        </Button>
                      </div>
                    </div>
                  </Card>
                )}

                <div className="space-y-4">
                  {timelineEvents.map((event, index) => (
                    <div key={event.id} className="flex items-start gap-4">
                      <div className="flex flex-col items-center">
                        <div className="w-4 h-4 bg-primary rounded-full"></div>
                        {index < timelineEvents.length - 1 && <div className="w-0.5 h-16 bg-border mt-2"></div>}
                      </div>
                      <div className="flex-1 pb-4">
                        <div className="flex items-center gap-2 mb-2">
                          <span className="font-semibold text-foreground">{event.year}</span>
                          <Badge className={getCategoryColor(event.category)}>
                            {getCategoryLabel(event.category)}
                          </Badge>
                        </div>
                        <p className="text-muted-foreground">{event.event}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </Card>
            </TabsContent>

            {/* Letters Tab */}
            <TabsContent value="letters" className="h-full overflow-y-auto">
              <Card className="p-6 bg-white/70 backdrop-blur-lg border border-white/30 shadow-glass">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-xl font-semibold text-foreground">나에게 쓰는 편지</h2>
                  <Button onClick={() => setShowAddLetter(true)} size="sm">
                    <Plus className="w-4 h-4 mr-2" />
                    편지 쓰기
                  </Button>
                </div>

                {showAddLetter && (
                  <Card className="p-4 mb-6 bg-white/50 border border-white/40">
                    <div className="space-y-3">
                      <h3 className="font-medium text-foreground">오늘의 나에게</h3>
                      <Textarea
                        placeholder="오늘 하루는 어땠나요? 나에게 하고 싶은 말을 써보세요..."
                        value={newLetterContent}
                        onChange={(e) => setNewLetterContent(e.target.value)}
                        rows={6}
                      />
                      <div className="flex gap-2">
                        <Button onClick={addDailyLetter} size="sm">
                          <Save className="w-4 h-4 mr-2" />
                          편지 저장
                        </Button>
                        <Button variant="ghost" size="sm" onClick={() => setShowAddLetter(false)}>
                          취소
                        </Button>
                      </div>
                    </div>
                  </Card>
                )}

                <div className="space-y-4">
                  {dailyLetters.map((letter) => (
                    <Card key={letter.id} className="p-4 bg-white/50 border border-white/40">
                      <div className="flex items-center justify-between mb-3">
                        <span className="text-sm font-medium text-primary">{letter.date}</span>
                        <Badge variant="secondary" className="flex items-center gap-1">
                          <Sparkles className="w-3 h-3" />
                          AI 분석
                        </Badge>
                      </div>
                      <p className="text-foreground mb-3 whitespace-pre-wrap">{letter.content}</p>
                      {letter.aiSummary && (
                        <div className="p-3 bg-primary/10 rounded-lg">
                          <p className="text-sm text-primary font-medium mb-1">AI 요약</p>
                          <p className="text-sm text-muted-foreground">{letter.aiSummary}</p>
                        </div>
                      )}
                    </Card>
                  ))}
                </div>
              </Card>
            </TabsContent>

            {/* Story Tab */}
            <TabsContent value="story" className="h-full overflow-y-auto">
              <Card className="p-6 bg-white/70 backdrop-blur-lg border border-white/30 shadow-glass">
                <div className="flex items-center gap-2 mb-6">
                  <Book className="w-6 h-6 text-primary" />
                  <h2 className="text-xl font-semibold text-foreground">나의 이야기 - 2025년</h2>
                </div>

                <div className="space-y-6">
                  <Card className="p-4 bg-gradient-to-r from-primary/10 to-purple-100/50 border border-primary/20">
                    <div className="flex items-center gap-2 mb-3">
                      <Sparkles className="w-5 h-5 text-primary" />
                      <h3 className="font-semibold text-foreground">AI가 만든 나의 서사</h3>
                    </div>
                    <p className="text-foreground leading-relaxed">
                      2025년, 당신은 새로운 도약을 준비하고 있습니다. 과거의 경험들을 바탕으로 현재를 충실히 살아가며, 
                      미래에 대한 명확한 비전을 가지고 있습니다. 매일 자신에게 쓰는 편지를 통해 성찰하고 성장하는 모습은 
                      진정한 자기계발의 모습을 보여줍니다.
                    </p>
                  </Card>

                  <div className="grid gap-4">
                    <Card className="p-4 bg-white/50 border border-white/40">
                      <h4 className="font-medium text-foreground mb-2">Chapter 1: 과거의 발자취</h4>
                      <p className="text-sm text-muted-foreground">
                        대학교 졸업과 첫 직장 취업을 통해 쌓아온 경험들이 현재의 나를 만들었습니다.
                      </p>
                    </Card>

                    <Card className="p-4 bg-white/50 border border-white/40">
                      <h4 className="font-medium text-foreground mb-2">Chapter 2: 현재의 다짐</h4>
                      <p className="text-sm text-muted-foreground">
                        2025년 새로운 목표를 세우며 더 나은 사람이 되고자 하는 의지를 보여주고 있습니다.
                      </p>
                    </Card>

                    <Card className="p-4 bg-white/50 border border-white/40">
                      <h4 className="font-medium text-foreground mb-2">Chapter 3: 미래의 꿈</h4>
                      <p className="text-sm text-muted-foreground">
                        창업이라는 새로운 도전을 앞두고 있으며, 이는 당신만의 독특한 서사의 시작입니다.
                      </p>
                    </Card>
                  </div>

                  <Button className="w-full" size="lg">
                    <Sparkles className="w-4 h-4 mr-2" />
                    AI로 완전한 자서전 생성하기
                  </Button>
                </div>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </main>
    </div>
  );
};

export default SelfNarrative;